# Add to this package list for additional SL algorithms
pacman::p_load(
tidyverse,
ggthemes,
ltmle,
tmle,
SuperLearner,
tidymodels,
caret,
dagitty,
ggdag,
here)
#heart_disease <- read_csv('/Users/alexadia/Documents/GitHub/Computational-Social-Science-Projects/Project 8/heart_disease_tmle.csv')
heart_disease <- read_csv('"D:/GitHub/Computational-Social-Science-Projects/Project 8/heart_disease_tmle.csv') #windows
heart_disease <- read_csv('D:/GitHub/Computational-Social-Science-Projects/Project 8/heart_disease_tmle.csv') #windows
# Add to this package list for additional SL algorithms
pacman::p_load(
tidyverse,
ggthemes,
ltmle,
tmle,
SuperLearner,
tidymodels,
caret,
dagitty,
ggdag,
here)
#heart_disease <- read_csv('/Users/alexadia/Documents/GitHub/Computational-Social-Science-Projects/Project 8/heart_disease_tmle.csv')
heart_disease <- read_csv('D:/GitHub/Computational-Social-Science-Projects/Project 8/heart_disease_tmle.csv') #windows
# Fit SuperLearner Model
## sl lib
listWrappers()
library<-c('SL.mean', 'SL.glmnet', 'SL.earth', "SL.lm", "SL.nnet") #picked these arbitrarily
## Train/Test split
# need to kick the variables that start with 2 since we ignore for this section
heart_disease_no2<-heart_disease%>%select(-bmi_2, -chol_2, -blood_pressure_2, -blood_pressure_medication_2)
#now get split
set.seed(24)
heart_disease_split<-initial_split(heart_disease_no2)
# Declare the training set with rsample::training()
train <- training(heart_disease_split)
# set training
y_train <- train %>%
pull(mortality)
x_train <- train %>%
select(-mortality)
# Do the same procedure with the test set
test <- testing(heart_disease_split)
y_test <- test %>%
pull(mortality)
x_test <- test %>%
select(-mortality)
## Train SuperLearner
sl_q1<- SuperLearner(Y = y_train,
X = x_train,
family = binomial(),
SL.library = library)
install.packages("earth")
# Add to this package list for additional SL algorithms
pacman::p_load(
tidyverse,
ggthemes,
ltmle,
tmle,
SuperLearner,
tidymodels,
caret,
dagitty,
ggdag,
here)
#heart_disease <- read_csv('/Users/alexadia/Documents/GitHub/Computational-Social-Science-Projects/Project 8/heart_disease_tmle.csv')
heart_disease <- read_csv('D:/GitHub/Computational-Social-Science-Projects/Project 8/heart_disease_tmle.csv') #windows
# Fit SuperLearner Model
## sl lib
listWrappers()
library<-c('SL.mean', 'SL.glmnet', 'SL.earth', "SL.lm", "SL.nnet") #picked these arbitrarily
## Train/Test split
# need to kick the variables that start with 2 since we ignore for this section
heart_disease_no2<-heart_disease%>%select(-bmi_2, -chol_2, -blood_pressure_2, -blood_pressure_medication_2)
#now get split
set.seed(24)
heart_disease_split<-initial_split(heart_disease_no2)
# Declare the training set with rsample::training()
train <- training(heart_disease_split)
# set training
y_train <- train %>%
pull(mortality)
x_train <- train %>%
select(-mortality)
# Do the same procedure with the test set
test <- testing(heart_disease_split)
y_test <- test %>%
pull(mortality)
x_test <- test %>%
select(-mortality)
## Train SuperLearner
sl_q1<- SuperLearner(Y = y_train,
X = x_train,
family = binomial(),
SL.library = library)
## Risk and Coefficient of each model
sl_q1
## Discrete winner and superlearner ensemble performance
## Confusion Matrix
preds <- predict(sl_q1,
x_test,
onlySL = TRUE)
# start with y_test
validation <- y_test %>%
# add our predictions
bind_cols(preds$pred[,1]) %>%
# rename columns
rename(obs = `...1`,
pred = `...2`) %>%
mutate(pred = ifelse(pred >= .5,
1,
0))
head(validation)
caret::confusionMatrix(as.factor(validation$pred),
as.factor(validation$obs))
?tmle
View(heart_disease_no2)
#define models
Y<-heart_disease_no2$mortality
A<-heart_disease_no2%>%select(blood_pressure_medication)
W<-heart_disease_no2%>%select(age, income_thousands, simplified_race)
tmle_result <- tmle(Y,
A,
W,
Q.SL.library = library,
g.SL.library = library,
verbose = TRUE)
#define models
Y<-heart_disease_no2%>%select(mortality)
A<-heart_disease_no2%>%select(blood_pressure_medication)
W<-heart_disease_no2%>%select(age, income_thousands, simplified_race)
tmle_result <- tmle(Y,
A,
W,
Q.SL.library = library,
g.SL.library = library,
verbose = TRUE)
#define models
Y<-heart_disease_no2%>%select(mortality)
A<-heart_disease_no2%>%select(blood_pressure_medication)
W<-heart_disease_no2%>%select(age, income_thousands, simplified_race)
tmle_result <- tmle(Y=Y,
A=A,
W=W,
Q.SL.library = library,
g.SL.library = library)
#define models
Y<-heart_disease_no2%>%select(mortality)%>%as.numeric()
#define models
Y<-heart_disease_no2%>%select(mortality)%>%as.factor()
#define models
Y<-as.numeric(heart_disease_no2$mortality)
A<-heart_disease_no2%>%select(blood_pressure_medication)
W<-heart_disease_no2%>%select(age, income_thousands, simplified_race)
tmle_result <- tmle(Y=Y,
A=A,
W=W,
Q.SL.library = library,
g.SL.library = library)
dim(Y)
dim(A)
dim(W)
#define models
Y<-as.numeric(heart_disease_no2$mortality)
A<-heart_disease_no2%>%select(blood_pressure_medication)%>%as.data.frame()
W<-heart_disease_no2%>%select(age, income_thousands, simplified_race)
tmle_result <- tmle(Y=Y,
A=A,
W=W,
Q.SL.library = library,
g.SL.library = library)
#define models
Y<-heart_disease_no2$mortality
A<-heart_disease_no2%blood_pressure_medication
#define models
Y<-heart_disease_no2$mortality
A<-heart_disease_no2$blood_pressure_medication
W<-heart_disease_no2%>%select(age, income_thousands, simplified_race)
tmle_result <- tmle(Y=Y,
A=A,
W=W,
family="binomial"
Q.SL.library = library,
#define models
Y<-heart_disease_no2$mortality
A<-heart_disease_no2$blood_pressure_medication
W<-heart_disease_no2%>%select(age, income_thousands, simplified_race)
tmle_result <- tmle(Y=Y,
A=A,
W=W,
family="binomial",
Q.SL.library = library,
g.SL.library = library)
summary(tmle_result)
tmle_result$estimates$ATE
