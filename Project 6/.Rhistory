prop_covariates = numeric(num_simulations),
mean_improvement = numeric(num_simulations))
# get simulations
for (i in 1:num_simulations) {
# Set seed for reproducibility, incrementing by i
set.seed(123 + i)
# Randomly select 5 covariates
selected_covariates <- sample(colnames(sim_df)[-which(names(sim_df) == "college")], 5)
# Create formula for matchit
formula <- as.formula(paste("college ~", paste(selected_covariates, collapse = "+")))
# Perform propensity score matching
matched_data <- matchit(formula, data = sim_df, method = "nearest")
# Calculate ATT
ATT <- att(matched_data)
# Calculate the standardized mean differences
std_mean_diff <- as.data.frame(standardize(matched_data))
# Calculate proportion of covariates meeting the threshold
prop_covariates <- mean(abs(std_mean_diff$distance) > 0.1)
# Calculate mean percent improvement in standardized mean difference
mean_improvement <- mean(std_mean_diff$improvement)
# Store results in the data frame
results[i, "ATT"] <- ATT
results[i, "prop_covariates"] <- prop_covariates
results[i, "mean_improvement"] <- mean_improvement
}
View(matched_data)
sim_df<-ypsps%>%
select(-starts_with("student_1973"))%>%select(-starts_with("student_1982"))%>%select(-interviewid)
num_simulations<-100
# Create an empty data frame to store results
results <- data.frame(ATT = numeric(num_simulations),
prop_covariates = numeric(num_simulations),
mean_improvement = numeric(num_simulations))
# get simulations
for (i in 1:num_simulations) {
# Set seed for reproducibility, incrementing by i
set.seed(123 + i)
# Randomly select 5 covariates
selected_covariates <- sample(colnames(sim_df)[-which(names(sim_df) == "college")], 5)
# Create formula for matchit
formula <- as.formula(paste("college ~", paste(selected_covariates, collapse = "+")))
# Perform propensity score matching
matched_data <- matchit(formula, data = sim_df, method = "nearest")
# Calculate ATT
treated <- matched_data$matches
control <- unlist(matched_data$matches)
ATT <- mean(sim_df$college[treated] - sim_df$college[control])
# Calculate the standardized mean differences
std_mean_diff <- as.data.frame(standardize(matched_data))
# Calculate proportion of covariates meeting the threshold
prop_covariates <- mean(abs(std_mean_diff$distance) > 0.1)
# Calculate mean percent improvement in standardized mean difference
mean_improvement <- mean(std_mean_diff$improvement)
# Store results in the data frame
results[i, "ATT"] <- ATT
results[i, "prop_covariates"] <- prop_covariates
results[i, "mean_improvement"] <- mean_improvement
}
sim_df<-ypsps%>%
select(-starts_with("student_1973"))%>%select(-starts_with("student_1982"))%>%select(-interviewid)
num_simulations<-100
# Create an empty data frame to store results
results <- data.frame(ATT = numeric(num_simulations),
prop_covariates = numeric(num_simulations),
mean_improvement = numeric(num_simulations))
# get simulations
for (i in 1:num_simulations) {
# Set seed for reproducibility, incrementing by i
set.seed(123 + i)
# Randomly select 5 covariates
selected_covariates <- sample(colnames(sim_df)[-which(names(sim_df) == "college")], 5)
# Create formula for matchit
formula <- as.formula(paste("college ~", paste(selected_covariates, collapse = "+")))
# Perform propensity score matching
matched_data <- matchit(formula, data = sim_df, method = "nearest")
# Calculate ATT
treated <- matched_data$matches
control <- unlist(matched_data$matches)
ATT <- mean(sim_df$college[treated] - sim_df$college[control])
#extract the matched data - need this because it's actually kind of difficult to get the differences from the matchit object :(
postmatch_data<-match.data(matched_data)
#we can calculate balance using cobalt like above
balance_tab<-bal.tab(postmatch_data)
# Calculate the SMD for the matched data
smd_matched <- standardized_mean_diff(matched_data)
prop_covariates <- smd_matched[smd_matched$estimate > 0.1, ]
prop_covariates<-nrow(prop_covariates)/5
# Calculate the mean percent improvement in the SMD
mean_improvement <- mean_percent_improve(matched_data)
# Store results in the data frame
results[i, "ATT"] <- ATT
results[i, "prop_covariates"] <- prop_covariates
results[i, "mean_improvement"] <- mean_improvement
}
sim_df<-ypsps%>%
select(-starts_with("student_1973"))%>%select(-starts_with("student_1982"))%>%select(-interviewid)
num_simulations<-100
# Create an empty data frame to store results
results <- data.frame(ATT = numeric(num_simulations),
prop_covariates = numeric(num_simulations),
mean_improvement = numeric(num_simulations))
# get simulations
for (i in 1:num_simulations) {
# Set seed for reproducibility, incrementing by i
set.seed(123 + i)
# Exclude "college" and "outcome" from the covariates
available_covariates <- setdiff(colnames(sim_df), c("college", "outcome"))
# Randomly select 5 covariates
selected_covariates <- sample(available_covariates, 5)
# Append "college" to the selected covariates
selected_covariates <- c(selected_covariates, "college")
# Create formula for matchit
formula <- as.formula(paste("college ~", paste(selected_covariates, collapse = "+")))
# Perform propensity score matching
matched_data <- matchit(formula, data = sim_df, method = "nearest")
#extract the matched data - need this because it's actually kind of difficult to get the differences from the matchit object :(
postmatch_data<-match.data(matched_data)
#manually calculate the ATT because I can't figure out how to do it the elegant way
treated <- postmatch_data$student_ppnscal[post_match_data$college==1]
control <- postmatch_data$student_ppnscal[post_match_data$college==0]
ATT <- mean(treated)-mean(control)
#we can calculate balance using cobalt like above
balance_tab<-bal.tab(postmatch_data)
# Calculate the SMD for the matched data
smd_matched <- standardized_mean_diff(matched_data)
prop_covariates <- smd_matched[smd_matched$estimate > 0.1, ]
prop_covariates<-nrow(prop_covariates)/5
# Calculate the mean percent improvement in the SMD
mean_improvement <- mean_percent_improve(matched_data)
# Store results in the data frame
results[i, "ATT"] <- ATT
results[i, "prop_covariates"] <- prop_covariates
results[i, "mean_improvement"] <- mean_improvement
}
available_covariates <- setdiff(colnames(sim_df), c("college", "outcome"))
# Randomly select 5 covariates
selected_covariates <- sample(available_covariates, 5)
# Append "college" to the selected covariates
selected_covariates <- c(selected_covariates, "college")
# Create formula for matchit
formula <- as.formula(paste("college ~", paste(selected_covariates, collapse = "+")))
# Perform propensity score matching
matched_data <- matchit(formula, data = sim_df, method = "nearest")
sim_df<-ypsps%>%
select(-starts_with("student_1973"))%>%select(-starts_with("student_1982"))%>%select(-interviewid)
available_covariates <- setdiff(colnames(sim_df), c("college", "outcome"))
# Randomly select 5 covariates
selected_covariates <- sample(available_covariates, 5)
# Create formula for matchit
formula <- as.formula(paste("college ~", paste(selected_covariates, collapse = "+")))
# Perform propensity score matching
matched_data <- matchit(formula, data = sim_df, method = "nearest")
#extract the matched data - need this because it's actually kind of difficult to get the differences from the matchit object :(
postmatch_data<-match.data(matched_data)
#manually calculate the ATT because I can't figure out how to do it the elegant way
treated <- postmatch_data$student_ppnscal[post_match_data$college==1]
#manually calculate the ATT because I can't figure out how to do it the elegant way
treated <- postmatch_data$student_ppnscal[postmatch_data$college==1]
control <- postmatch_data$student_ppnscal[postmatch_data$college==0]
ATT <- mean(treated)-mean(control)
balance_tab<-bal.tab(postmatch_data)
View(postmatch_data)
postmatch_data$student_ppnscal
?bal.tab
balance_tab<-bal.tab(postmatch_data, treat = college)
# Check if matching was successful
if (is.null(matched_data$matches)) {
stop("Matching failed. Please check your data and matching procedure.")
}
View(postmatch_data)
balance_tab<-bal.tab(postmatch_data)
balance_tab<-bal.tab(postmatch_data, treat="college")
balance_tab<-bal.tab(postmatch_data, treat="college")
summary(postmatch_data)
sumamry(matched_Data)
summary(matched_data)
balance_tab<-bal.tab(postmatch_data, treat=postmatch_data$college)
smd_matched <- standardized_mean_diff(matched_data)
View(balance_tab)
balance_tab<-bal.tab(postmatch_data, treat=postmatch_data$college, binary="std")
View(balance_tab)
balance_tab$sumstats
smd_matched <- mean(balance_tab$Diff.Adj<=.1)
smd_matched <- nrow(balance_tab$Diff.Adj<=.1)
balance_tab[["Balance"]][["Diff.Adj"]]
View(postmatch_data)
balance_tab<-bal.tab(postmatch_data, treat=postmatch_data$college, binary="std", method="adj")
balance_tab<-bal.tab(postmatch_data, treat=postmatch_data$college, binary="std", method="matching")
View(matched_data)
summary(matched_data)
summary(matched_data)$sum.stats
install.packages("MatchItEXT")
install.packages("MatchItEXT")
# Select covariates that represent the "true" model for selection, fit model
select_df<-ypsps%>%select(student_LifeWish, student_GPA, student_Race, student_Knowledge, student_SchClub, parent_HHInc, parent_EducHH, parent_EducW, parent_Knowledge, parent_OwnHome, college)
select_covs<-select_df%>%select(-college)
select_model<-glm(college ~ ., data = select_df, family = binomial)
# Plot the balance for the top 10 covariates
balance_stats <- bal.tab(select_covs, treat=select_df$college)
# Report the overall balance and the proportion of covariates that meet the balance threshold
balance_stats
matched_data <- matchit(formula, data = sim_df, method = "nearest", replace=TRUE)
postmatch_data<-match.data(matched_data)
balance_tab<-bal.tab(postmatch_data, treat=postmatch_data$college, binary="std", method="matching")
balance_tab<-bal.tab(postmatch_data, treat=postmatch_data$college, binary="std")
# Perform propensity score matching
matched_data <- matchit(formula, data = sim_df, method = "nearest", replace=TRUE)
#extract the matched data - need this because it's actually kind of difficult to get the differences from the matchit object :(
postmatch_data<-match.data(matched_data)
#manually calculate the ATT because I can't figure out how to do it the elegant way
treated <- postmatch_data$student_ppnscal[postmatch_data$college==1]
control <- postmatch_data$student_ppnscal[postmatch_data$college==0]
ATT <- mean(treated)-mean(control)
balance_tab<-bal.tab(postmatch_data, treat=postmatch_data$college, binary="std")
View(balance_tab)
balance_tab<-bal.tab(sim_df, treat=sim_df$college, binary="std")
balance_tab<-bal.tab(sim_df, treat=sim_df$college, binary="std", method="matching")
sim_df<-ypsps%>%
select(-starts_with("student_1973"))%>%select(-starts_with("student_1982"))%>%select(-interviewid)
available_covariates <- sim_df%>%select(-college, -student_ppnscal)
num_simulations<-100
# Create an empty data frame to store results
results <- data.frame(ATT = numeric(num_simulations))
# get simulations
for (i in 1:num_simulations) {
# Set seed for reproducibility, incrementing by i
set.seed(6 + i)
# Randomly select 5 covariates
selected_covariates <- sample(available_covariates, 5)
# Create formula for matchit
formula <- as.formula(paste("college ~", paste(selected_covariates, collapse = "+")))
# Perform propensity score matching
matched_data <- matchit(formula, data = sim_df, method = "nearest", replace=TRUE)
#extract the matched data - need this because it's actually kind of difficult to get the differences from the matchit object :(
postmatch_data<-match.data(matched_data)
#manually calculate the ATT because I can't figure out how to do it the elegant way
treated <- postmatch_data$student_ppnscal[postmatch_data$college==1]
control <- postmatch_data$student_ppnscal[postmatch_data$college==0]
ATT <- mean(treated)-mean(control)
# Store results in the data frame
results[i, "ATT"] <- ATT
}
sim_df<-ypsps%>%
select(-starts_with("student_1973"))%>%select(-starts_with("student_1982"))%>%select(-interviewid)
available_covariates <- sim_df%>%select(-college, -student_ppnscal, -parent_GPHighSchoolPlacebo, -parent_HHCollegePlacebo)
num_simulations<-100
# Create an empty data frame to store results
results <- data.frame(ATT = numeric(num_simulations))
# get simulations
for (i in 1:num_simulations) {
# Set seed for reproducibility, incrementing by i
set.seed(6 + i)
# Randomly select 5 covariates
selected_covariates <- sample(available_covariates, 5)
# Create formula for matchit
formula <- as.formula(paste("college ~", paste(selected_covariates, collapse = "+")))
# Perform propensity score matching
matched_data <- matchit(formula, data = sim_df, method = "nearest", replace=TRUE)
#extract the matched data - need this because it's actually kind of difficult to get the differences from the matchit object :(
postmatch_data<-match.data(matched_data)
#manually calculate the ATT because I can't figure out how to do it the elegant way
treated <- postmatch_data$student_ppnscal[postmatch_data$college==1]
control <- postmatch_data$student_ppnscal[postmatch_data$college==0]
ATT <- mean(treated)-mean(control)
# Store results in the data frame
results[i, "ATT"] <- ATT
}
#print results?
head(results)
# Randomly select 5 covariates
selected_covariates <- sample(available_covariates, 5)
# Create formula for matchit
formula <- as.formula(paste("college ~", paste(selected_covariates, collapse = "+")))
# Perform propensity score matching
matched_data <- matchit(formula, data = sim_df, method = "nearest", replace=TRUE)
#extract the matched data - need this because it's actually kind of difficult to get the differences from the matchit object :(
postmatch_data<-match.data(matched_data)
#manually calculate the ATT because I can't figure out how to do it the elegant way
treated <- postmatch_data$student_ppnscal[postmatch_data$college==1]
control <- postmatch_data$student_ppnscal[postmatch_data$college==0]
ATT <- mean(treated)-mean(control)
means_treatment <- colMeans(postmatch_data[postmatch_data$treatment == 1, -1])
means_treatment <- colMeans(postmatch_data[postmatch_data$college == 1, -1])
means_control <- colMeans(postmatch_data[postmatch_data$college == 0, -1])
sds_treatment <- apply(postmatch_data[postmatch_data$college == 1, -1], 2, sd)
sds_control <- apply(postmatch_data[postmatch_data$college == 0, -1], 2, sd)
# Calculate standardized mean differences
smd <- (means_treatment - means_control) / sqrt((sds_treatment^2 + sds_control^2) / 2)
smd_threshold<- sum(abs(smd) < 0.1)
smd_threshold<- sum(smd < 0.1)
smd
smd<-as.data.frame(smd)
View(smd)
count <- nrow(smd[smd$smd < 0.1, ])
abs_smd <- abs(smd)
count <- sum(abs_smd$smd < 0.1)
smd <- (means_treatment - means_control) / sqrt((sds_treatment^2 + sds_control^2) / 2)
smd<-as.data.frame(smd)
abs_smd <- abs(smd)
count <- sum(abs_smd$smd < 0.1)
count
View(abs_smd)
available_covariates <- sim_df%>%select(-college, -student_ppnscal, -parent_GPHighSchoolPlacebo, -parent_HHCollegePlacebo)
# Randomly select 5 covariates
selected_covariates <- sample(available_covariates, 5)
# Create formula for matchit
formula <- as.formula(paste("college ~", paste(selected_covariates, collapse = "+")))
# Perform propensity score matching
matched_data <- matchit(formula, data = sim_df, method = "nearest", replace=TRUE)
#extract the matched data - need this because it's actually kind of difficult to get the differences from the matchit object :(
postmatch_data<-match.data(matched_data)
#manually calculate the ATT because I can't figure out how to do it the elegant way
treated <- postmatch_data$student_ppnscal[postmatch_data$college==1]
control <- postmatch_data$student_ppnscal[postmatch_data$college==0]
ATT <- mean(treated)-mean(control)
means_treatment <- colMeans(postmatch_data[postmatch_data$college == 1, -1])
means_control <- colMeans(postmatch_data[postmatch_data$college == 0, -1])
sds_treatment <- apply(postmatch_data[postmatch_data$college == 1, -1], 2, sd)
sds_control <- apply(postmatch_data[postmatch_data$college == 0, -1], 2, sd)
# Calculate standardized mean differences
smd <- (means_treatment - means_control) / sqrt((sds_treatment^2 + sds_control^2) / 2)
smd<-as.data.frame(smd)
abs_smd <- abs(smd)
count <- sum(abs_smd$smd < 0.1)
View(smd_before_matching)
View(smd)
sim_df<-ypsps%>%
select(-starts_with("student_1973"))%>%select(-starts_with("student_1982"))%>%select(-interviewid, -parent_GPHighSchoolPlacebo, -parent_HHCollegePlacebo)
available_covariates <- sim_df%>%select(-college, -student_ppnscal)
num_simulations<-100
# Create an empty data frame to store results
results <- data.frame(ATT = numeric(num_simulations))
# get simulations
#for (i in 1:num_simulations) {
# Set seed for reproducibility, incrementing by i
#set.seed(6 + i)
# Randomly select 5 covariates
selected_covariates <- sample(available_covariates, 5)
# Create formula for matchit
formula <- as.formula(paste("college ~", paste(selected_covariates, collapse = "+")))
# Perform propensity score matching
matched_data <- matchit(formula, data = sim_df, method = "nearest", replace=TRUE)
#extract the matched data - need this because it's actually kind of difficult to get the differences from the matchit object :(
postmatch_data<-match.data(matched_data)
#manually calculate the ATT because I can't figure out how to do it the elegant way
treated <- postmatch_data$student_ppnscal[postmatch_data$college==1]
control <- postmatch_data$student_ppnscal[postmatch_data$college==0]
ATT <- mean(treated)-mean(control)
means_treatment <- colMeans(postmatch_data[postmatch_data$college == 1, -1])
means_control <- colMeans(postmatch_data[postmatch_data$college == 0, -1])
sds_treatment <- apply(postmatch_data[postmatch_data$college == 1, -1], 2, sd)
sds_control <- apply(postmatch_data[postmatch_data$college == 0, -1], 2, sd)
# Calculate standardized mean differences
smd <- (means_treatment - means_control) / sqrt((sds_treatment^2 + sds_control^2) / 2)
smd<-as.data.frame(smd)
abs_smd <- abs(smd)
count <- sum(abs_smd$smd < 0.1)
total<-nrow(abs_smd)
total<-nrow(abs_smd)
prop_cov<-count/total
sim_df<-ypsps%>%
select(-starts_with("student_1973"))%>%select(-starts_with("student_1982"))%>%select(-interviewid, -parent_GPHighSchoolPlacebo, -parent_HHCollegePlacebo)
starter_df<-sim_df%>%select(-student_ppnscal)
means_treatment_orig <- colMeans(starter_df[starter_df$college == 1, -1])
means_control_orig <- colMeans(starter_df[starter_df$college == 0, -1])
sds_treatment_orig <- apply(starter_df[starter_df$college == 1, -1], 2, sd)
sds_control_orig <- apply(starter_df[starter_df$college == 0, -1], 2, sd)
smd_before <- (means_treatment_orig - means_control_orig) / sqrt((sds_treatment_orig^2 + sds_control_orig^2) / 2)
smd_before <- as.data.frame(smd_before)
available_covariates <- sim_df%>%select(-college, -student_ppnscal)
num_simulations<-100
# Create an empty data frame to store results
results <- data.frame(ATT = numeric(num_simulations))
# get simulations
#for (i in 1:num_simulations) {
# Set seed for reproducibility, incrementing by i
#set.seed(6 + i)
# Randomly select 5 covariates
selected_covariates <- sample(available_covariates, 5)
# Create formula for matchit
formula <- as.formula(paste("college ~", paste(selected_covariates, collapse = "+")))
# Perform propensity score matching
matched_data <- matchit(formula, data = sim_df, method = "nearest", replace=TRUE)
#extract the matched data - need this because it's actually kind of difficult to get the differences from the matchit object :(
postmatch_data<-match.data(matched_data)
#manually calculate the ATT because I can't figure out how to do it the elegant way
treated <- postmatch_data$student_ppnscal[postmatch_data$college==1]
control <- postmatch_data$student_ppnscal[postmatch_data$college==0]
ATT <- mean(treated)-mean(control)
means_treatment <- colMeans(postmatch_data[postmatch_data$college == 1, -1])
means_control <- colMeans(postmatch_data[postmatch_data$college == 0, -1])
sds_treatment <- apply(postmatch_data[postmatch_data$college == 1, -1], 2, sd)
sds_control <- apply(postmatch_data[postmatch_data$college == 0, -1], 2, sd)
# Calculate standardized mean differences
smd <- (means_treatment - means_control) / sqrt((sds_treatment^2 + sds_control^2) / 2)
smd<-as.data.frame(smd)
abs_smd <- abs(smd)
#proportion of covariates
count <- sum(abs_smd$smd < 0.1)
total<-nrow(abs_smd)
prop_cov<-count/total
percent_improvement <- ((smd_before - smd) / abs(smd_before)) * 100
View(smd)
View(smd_before)
columns_df1 <- names(smd)
columns_df2 <- names(smd_before)
columns_only_in_df1 <- setdiff(columns_df1, columns_df2)
smd<-as.data.frame(smd)%>%select(-weights, - distance)
smd<-as.data.frame(smd)%>%select(-weight, -distance)
smd<-as.data.frame(smd)%>%head(-2)
smd_before$student_ppscal
smd$student_ppscal
smd$college
sim_df<-ypsps%>%
select(-starts_with("student_1973"))%>%select(-starts_with("student_1982"))%>%select(-interviewid, -parent_GPHighSchoolPlacebo, -parent_HHCollegePlacebo)
starter_df<-sim_df%>%select(-student_ppnscal)
means_treatment_orig <- colMeans(starter_df[starter_df$college == 1, -1])
means_control_orig <- colMeans(starter_df[starter_df$college == 0, -1])
sds_treatment_orig <- apply(starter_df[starter_df$college == 1, -1], 2, sd)
sds_control_orig <- apply(starter_df[starter_df$college == 0, -1], 2, sd)
smd_before <- (means_treatment_orig - means_control_orig) / sqrt((sds_treatment_orig^2 + sds_control_orig^2) / 2)
smd_before <- as.data.frame(smd_before)
available_covariates <- sim_df%>%select(-college, -student_ppnscal)
num_simulations<-100
# Create an empty data frame to store results
results <- data.frame(ATT = numeric(num_simulations), Prop_Cov=numeric(num_simulations))
# get simulations
for (i in 1:num_simulations) {
# Set seed for reproducibility, incrementing by i
set.seed(6 + i)
# Randomly select 5 covariates
selected_covariates <- sample(available_covariates, 5)
# Create formula for matchit
formula <- as.formula(paste("college ~", paste(selected_covariates, collapse = "+")))
# Perform propensity score matching
matched_data <- matchit(formula, data = sim_df, method = "nearest", replace=TRUE)
#extract the matched data - need this because it's actually kind of difficult to get the differences from the matchit object :(
postmatch_data<-match.data(matched_data)
#manually calculate the ATT because I can't figure out how to do it the elegant way
treated <- postmatch_data$student_ppnscal[postmatch_data$college==1]
control <- postmatch_data$student_ppnscal[postmatch_data$college==0]
ATT <- mean(treated)-mean(control)
means_treatment <- colMeans(postmatch_data[postmatch_data$college == 1, -1])
means_control <- colMeans(postmatch_data[postmatch_data$college == 0, -1])
sds_treatment <- apply(postmatch_data[postmatch_data$college == 1, -1], 2, sd)
sds_control <- apply(postmatch_data[postmatch_data$college == 0, -1], 2, sd)
# Calculate standardized mean differences
smd <- (means_treatment - means_control) / sqrt((sds_treatment^2 + sds_control^2) / 2)
smd<-as.data.frame(smd)%>%head(-2)
abs_smd <- abs(smd)
#proportion of covariates
count <- sum(abs_smd$smd < 0.1)
total<-nrow(abs_smd)
prop_cov<-count/total
# Store results in the data frame
results[i, "ATT"] <- ATT
results[i, "Prop_Cov"] <- prop_cov
}
View(results)
ggplot(results, aes(x = prop_cov, y = ATT)) +
geom_point(alpha = 0.5) +  # Add transparency to avoid overplotting
labs(x = "Proportion of Covariates", y = "ATT") +  # Label axes
ggtitle("Scatterplot of ATTs vs. Balanced Covariate Proportions")  # Title of the plot
ggplot(results, aes(x = Prop_Cov, y = ATT)) +
geom_point(alpha = 0.5) +  # Add transparency to avoid overplotting
labs(x = "Proportion of Covariates", y = "ATT") +  # Label axes
ggtitle("Scatterplot of ATTs vs. Balanced Covariate Proportions")  # Title of the plot
#simulation graphs
graph_sims<-10
graph_list <- list()
for (i in 1:graph_sims) {
# Set seed for reproducibility, incrementing by i
set.seed(6 + i)
# Randomly select 5 covariates
selected_covariates <- sample(available_covariates, 5)
# Create formula for matchit
formula <- as.formula(paste("college ~", paste(selected_covariates, collapse = "+")))
# Perform propensity score matching
matched_data <- matchit(formula, data = sim_df, method = "nearest", replace=TRUE)
m.out<-match.data(matched_data)
graph<-love.plot(m.out, binary = "std", thresholds = c(m = .1))
graph_list[[i]] <- graph
}
View(graph_list)
#simulation graphs
graph_sims<-10
graph_list <- list()
for (i in 1:graph_sims) {
# Set seed for reproducibility, incrementing by i
set.seed(6 + i)
# Randomly select 5 covariates
selected_covariates <- sample(available_covariates, 5)
# Create formula for matchit
formula <- as.formula(paste("college ~", paste(selected_covariates, collapse = "+")))
# Perform propensity score matching
matched_data <- matchit(formula, data = sim_df, method = "nearest", replace=TRUE)
m.out<-match.data(matched_data)
graph<-love.plot(m.out, treat=m.out$college, binary = "std", thresholds = c(m = .1))
graph_list[[i]] <- graph
}
View(graph_list)
grid.arrange(grobs = graph_list, nrow = 2) # Adjust nrow and ncol as needed
install.packages("gridExtra")
library(gridExtra)
grid.arrange(grobs = graph_list, nrow = 2) # Adjust nrow and ncol as needed
grid.arrange(grobs = graph_list, nrow = 2)
graph
plot(graph)
plot(graph_list)
grid.arrange(grobs = plot_list, ncol = 2)
grid.arrange(grobs = graph_list, ncol = 2)
install.packages("Matching")
